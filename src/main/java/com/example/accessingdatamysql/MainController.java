package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@Controller	// This means that this class is a Controller
@RequestMapping
public class MainController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private CarRepository carRepository;


	@PostMapping(path="/addUser") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestBody User user) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		List<User> users = userRepository.findAll();

		for (User u : users) {
			if (u.getEmail().equals(user.getEmail()))
				return "EMAIL_ALREADY_USED";
		}

		Car c = new Car();
		c.setUser(user);

		userRepository.save(user);
		carRepository.save(c);
		return "SUCCESSFUL_REGISTRATION";
	}

	@GetMapping(path="/getAllUsers")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@GetMapping(path = "/getUser/{id}")
	public  @ResponseBody  Optional<User> getUserById(@PathVariable(value = "id") Integer UserId)
	{
		//	.orElseThrow(() -> new ResourceNotFoundException("Employee not found for this id :: " + employeeId));
		return userRepository.findById(UserId);
	}

	@GetMapping(path = "/getUserByName/{username}")
	public @ResponseBody User findUserByName(@PathVariable String username) {
		return userRepository.findByName(username);
	}

	@PutMapping(value = "/updateUser/{id}")
	public @ResponseBody String updateUser(@PathVariable(value = "id") Integer id,
										   @RequestBody User param){
		User user = userRepository.findById(id).get();
		user.setEmail(param.getEmail());
		user.setName(param.getName());
		user.setPassword(param.getPassword());
		user.setPictureUrl(param.getPictureUrl());
		userRepository.save(user);

		return "USER_SUCCESSFUL_UPDATED";
	}

	@RequestMapping(value="/deleteUser/{id}", method={RequestMethod.DELETE, RequestMethod.GET})
	public @ResponseBody void deleteUser(@PathVariable(value = "id") Integer id){
		Optional<User> OptionalUser = userRepository.findById(id);
		User user = OptionalUser.get();
		userRepository.delete(user);
	}

	@PostMapping(path="/login")
	public @ResponseBody String Login (@RequestParam String email, @RequestParam String password) {
		List<User> list = userRepository.findAll();

		// Basic authentication:
		for (User u : list) {
			if (u.getEmail().equals(email))
				if (u.getPassword().equals(password))
					return "SUCCESSFUL_LOGIN";
				return "WRONG_PASSWORD";
		}

		return "NO_EMAIL_FOUND";
	}


// ----------------------------------------------------------------------------- Car

	//GET ALL CARS
	@GetMapping(path="/getAllCars")
	public @ResponseBody Iterable<Car> getAllCars() {
		// This returns a JSON or XML with the users
		return carRepository.findAll();
	}

	// GET CAR
	@GetMapping(path = "/getCar/{id}")
	public  @ResponseBody  Optional<Car> getCarById(@PathVariable(value = "id") Integer Id)
	{
		//	.orElseThrow(() -> new ResourceNotFoundException("Employee not found for this id :: " + employeeId));
		return carRepository.findById(Id);
	}
	//UPDATE CAR
	@PutMapping(path = "/getUser/{id}/updateCar")
	public @ResponseBody String updateCar(@PathVariable(value = "id") Integer id, @RequestParam String brand,
										  @RequestParam String model,
										  @RequestParam String serial){
		Car car = carRepository.findById(id).get();
		car.setBrand(brand);
		car.setModel(model);
		car.setSerial(serial);
		carRepository.save(car);

		return "Updated car with id: " +  id;
	}

	//DELETE CAR
	@PutMapping(path = "/getUser/{id}/deleteCar")
	public @ResponseBody String deleteCar(@PathVariable(value = "id") Integer id){
		updateCar(id,null,null,null);

		return "deleted car with id: " +  id;
	}
}
